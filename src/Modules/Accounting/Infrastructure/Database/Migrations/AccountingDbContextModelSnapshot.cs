// <auto-generated />
using System;
using System.Text.Json;
using Accounting.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Accounting.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    partial class AccountingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("contabilidad")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accounting.Domain.AccountingAssistants.AccountingAssistant", b =>
                {
                    b.Property<long>("AccountingAssistantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AccountingAssistantId"));

                    b.Property<string>("Account")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("cuenta");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<string>("Detail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("detalle");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("identificacion");

                    b.Property<long>("Identifier")
                        .HasColumnType("bigint")
                        .HasColumnName("identificador");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("naturaleza");

                    b.Property<string>("Nit")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("nit");

                    b.Property<string>("Period")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("periodo");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tipo");

                    b.Property<decimal>("Value")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("valor");

                    b.Property<int?>("VerificationDigit")
                        .HasColumnType("integer")
                        .HasColumnName("digito_verificacion");

                    b.HasKey("AccountingAssistantId");

                    b.ToTable("auxiliar_contable", "contabilidad");
                });

            modelBuilder.Entity("Accounting.Domain.Concepts.Concept", b =>
                {
                    b.Property<long>("ConceptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ConceptId"));

                    b.Property<string>("ContraCreditAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_contra_credito");

                    b.Property<string>("ContraDebitAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_contra_debito");

                    b.Property<string>("CreditAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_credito");

                    b.Property<string>("DebitAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_debito");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.HasKey("ConceptId");

                    b.ToTable("conceptos", "contabilidad");
                });

            modelBuilder.Entity("Accounting.Domain.Consecutives.Consecutive", b =>
                {
                    b.Property<long>("ConsecutiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ConsecutiveId"));

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("naturaleza");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("consecutivo");

                    b.Property<string>("SourceDocument")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("documento_fuente");

                    b.HasKey("ConsecutiveId");

                    b.ToTable("consecutivos", "contabilidad");
                });

            modelBuilder.Entity("Accounting.Domain.PassiveTransactions.PassiveTransaction", b =>
                {
                    b.Property<long>("PassiveTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PassiveTransactionId"));

                    b.Property<string>("ContraCreditAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_contra_credito");

                    b.Property<string>("ContraDebitAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_contra_debito");

                    b.Property<string>("CreditAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_credito");

                    b.Property<string>("DebitAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_debito");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<long>("TypeOperationsId")
                        .HasColumnType("bigint")
                        .HasColumnName("tipo_operaciones_id");

                    b.HasKey("PassiveTransactionId");

                    b.ToTable("transacciones_pasivas", "contabilidad");
                });

            modelBuilder.Entity("Accounting.Domain.Treasuries.Treasury", b =>
                {
                    b.Property<long>("TreasuryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TreasuryId"));

                    b.Property<string>("BankAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_bancaria");

                    b.Property<string>("CreditAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_credito");

                    b.Property<string>("DebitAccount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cuenta_debito");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.HasKey("TreasuryId");

                    b.ToTable("tesoreria", "contabilidad");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Property<int>("ConfigurationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigurationParameterId"));

                    b.Property<bool>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("editable");

                    b.Property<string>("HomologationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo_homologacion");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("padre_id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("estado");

                    b.Property<bool>("System")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sistema");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("categoria")
                        .HasColumnName("tipo");

                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("ConfigurationParameterId");

                    b.HasIndex("ParentId");

                    b.ToTable("parametros_configuracion", "contabilidad");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.HasOne("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
