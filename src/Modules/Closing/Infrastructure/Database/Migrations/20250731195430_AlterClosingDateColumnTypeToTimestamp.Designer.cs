// <auto-generated />
using System;
using System.Text.Json;
using Closing.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Closing.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ClosingDbContext))]
    [Migration("20250731195430_AlterClosingDateColumnTypeToTimestamp")]
    partial class AlterClosingDateColumnTypeToTimestamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cierre")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Closing.Domain.ClientOperations.ClientOperation", b =>
                {
                    b.Property<long>("ClientOperationId")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("AffiliateId")
                        .HasColumnType("integer")
                        .HasColumnName("afiliado_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("valor");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_aplicacion");

                    b.Property<DateTime>("FilingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_radicacion");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("integer")
                        .HasColumnName("objetivo_id");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<long>("TransactionSubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("subtipo_transaccion_id");

                    b.HasKey("ClientOperationId");

                    b.ToTable("operaciones_cliente", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.PortfolioValuations.PortfolioValuation", b =>
                {
                    b.Property<long>("PortfolioValuationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PortfolioValuationId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("valor");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<decimal>("CostPerUnit")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("costo_unidad");

                    b.Property<decimal>("DailyProfitability")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("rentabilidad_diaria");

                    b.Property<decimal>("GrossYieldPerUnit")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("rendimiento_bruto_unidad");

                    b.Property<decimal>("IncomingOperations")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("operaciones_entrada");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("cerrado");

                    b.Property<decimal>("OutgoingOperations")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("operaciones_salida");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<decimal>("UnitValue")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("valor_unidad");

                    b.Property<decimal>("Units")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("unidades");

                    b.HasKey("PortfolioValuationId");

                    b.ToTable("valoracion_portafolio", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.ProfitLossConcepts.ProfitLossConcept", b =>
                {
                    b.Property<long>("ProfitLossConceptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProfitLossConceptId"));

                    b.Property<bool>("AllowNegative")
                        .HasColumnType("boolean")
                        .HasColumnName("admite_negativo");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("concepto");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("naturaleza");

                    b.HasKey("ProfitLossConceptId");

                    b.ToTable("conceptos_pyg", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.ProfitLosses.ProfitLoss", b =>
                {
                    b.Property<long>("ProfitLossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProfitLossId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("valor");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_efectiva");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<long>("ProfitLossConceptId")
                        .HasColumnType("bigint")
                        .HasColumnName("concepto_id");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fuente");

                    b.HasKey("ProfitLossId");

                    b.HasIndex("ProfitLossConceptId");

                    b.ToTable("pyg", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.TrustYields.TrustYield", b =>
                {
                    b.Property<long>("TrustYieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TrustYieldId"));

                    b.Property<decimal>("Capital")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("capital");

                    b.Property<decimal>("ClosingBalance")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("saldo_cierre");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<decimal>("Commissions")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("comisiones");

                    b.Property<decimal>("ContingentRetention")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("retencion_contingente");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("costo");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("gastos");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("ingresos");

                    b.Property<decimal>("Participation")
                        .HasColumnType("decimal(38, 16)")
                        .HasColumnName("participacion");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<decimal>("PreClosingBalance")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("saldo_precierre");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<long>("TrustId")
                        .HasColumnType("bigint")
                        .HasColumnName("fideicomiso_id");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(38, 16)")
                        .HasColumnName("unidades");

                    b.Property<decimal>("YieldAmount")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("rendimientos");

                    b.Property<decimal>("YieldRetention")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("retencion_rendimiento");

                    b.HasKey("TrustYieldId");

                    b.ToTable("rendimientos_fideicomisos", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.YieldDetails.YieldDetail", b =>
                {
                    b.Property<long>("YieldDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("YieldDetailId"));

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<decimal>("Commissions")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("comisiones");

                    b.Property<JsonDocument>("Concept")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("concepto");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("gastos");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("ingresos");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("cerrado");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fuente");

                    b.HasKey("YieldDetailId");

                    b.ToTable("detalle_rendimientos", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.Yields.Yield", b =>
                {
                    b.Property<long>("YieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("YieldId"));

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<decimal>("Commissions")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("comisiones");

                    b.Property<decimal>("Costs")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("costos");

                    b.Property<decimal>("CreditedYields")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("rendimientos_abonados");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("gastos");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("ingresos");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("cerrado");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<decimal>("YieldToCredit")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("rendimientos_abonar");

                    b.HasKey("YieldId");

                    b.ToTable("rendimientos", "cierre");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Property<int>("ConfigurationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigurationParameterId"));

                    b.Property<bool>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("editable");

                    b.Property<string>("HomologationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo_homologacion");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("padre_id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("estado");

                    b.Property<bool>("System")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sistema");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("categoria")
                        .HasColumnName("tipo");

                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("ConfigurationParameterId");

                    b.HasIndex("ParentId");

                    b.ToTable("parametros_configuracion", "cierre");
                });

            modelBuilder.Entity("Closing.Domain.ProfitLosses.ProfitLoss", b =>
                {
                    b.HasOne("Closing.Domain.ProfitLossConcepts.ProfitLossConcept", "ProfitLossConcept")
                        .WithMany("ProfitLosses")
                        .HasForeignKey("ProfitLossConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfitLossConcept");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.HasOne("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Closing.Domain.ProfitLossConcepts.ProfitLossConcept", b =>
                {
                    b.Navigation("ProfitLosses");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
