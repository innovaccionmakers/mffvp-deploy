// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Treasury.Infrastructure.Database;

#nullable disable

namespace Treasury.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TreasuryDbContext))]
    [Migration("20250806155127_AlterTableEmisorAddNewColumnBank")]
    partial class AlterTableEmisorAddNewColumnBank
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tesoreria")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Property<int>("ConfigurationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigurationParameterId"));

                    b.Property<bool>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("editable");

                    b.Property<string>("HomologationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo_homologacion");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("padre_id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("estado");

                    b.Property<bool>("System")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sistema");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("categoria")
                        .HasColumnName("tipo");

                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("ConfigurationParameterId");

                    b.HasIndex("ParentId");

                    b.ToTable("parametros_configuracion", "tesoreria");
                });

            modelBuilder.Entity("Treasury.Domain.BankAccounts.BankAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero_cuenta");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_cuenta");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint")
                        .HasColumnName("emisor_id");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.ToTable("cuenta_bancaria", "tesoreria");
                });

            modelBuilder.Entity("Treasury.Domain.Issuers.Issuer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<int>("Digit")
                        .HasColumnType("integer")
                        .HasColumnName("digito");

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologado");

                    b.Property<string>("IssuerCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emisor");

                    b.Property<float>("Nit")
                        .HasColumnType("real")
                        .HasColumnName("nit");

                    b.HasKey("Id");

                    b.ToTable("emisor", "tesoreria");
                });

            modelBuilder.Entity("Treasury.Domain.TreasuryConcepts.TreasuryConcept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowsExpense")
                        .HasColumnType("boolean")
                        .HasColumnName("permite_gasto");

                    b.Property<bool>("AllowsNegative")
                        .HasColumnType("boolean")
                        .HasColumnName("admite_negativo");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("concepto");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("naturaleza");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<bool>("RequiresBankAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("cuenta_bancaria");

                    b.Property<bool>("RequiresCounterparty")
                        .HasColumnType("boolean")
                        .HasColumnName("contraparte");

                    b.HasKey("Id");

                    b.ToTable("conceptos_tesoreria", "tesoreria");
                });

            modelBuilder.Entity("Treasury.Domain.TreasuryMovements.TreasuryMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BankAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("cuenta_bancaria_id");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<long?>("CounterpartyId")
                        .HasColumnType("bigint")
                        .HasColumnName("contraparte_id");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("entidad_id");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portafolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<long>("TreasuryConceptId")
                        .HasColumnType("bigint")
                        .HasColumnName("concepto_tesoreria_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("EntityId");

                    b.HasIndex("TreasuryConceptId");

                    b.ToTable("movimientos_tesoreria", "tesoreria");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.HasOne("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Treasury.Domain.BankAccounts.BankAccount", b =>
                {
                    b.HasOne("Treasury.Domain.Issuers.Issuer", "Issuer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Treasury.Domain.TreasuryMovements.TreasuryMovement", b =>
                {
                    b.HasOne("Treasury.Domain.BankAccounts.BankAccount", "BankAccount")
                        .WithMany("TreasuryMovements")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("Treasury.Domain.Issuers.Issuer", "Counterparty")
                        .WithMany("TreasuryMovementsAsCounterparty")
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Treasury.Domain.Issuers.Issuer", "Entity")
                        .WithMany("TreasuryMovementsAsEntity")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Treasury.Domain.TreasuryConcepts.TreasuryConcept", "TreasuryConcept")
                        .WithMany("TreasuryMovements")
                        .HasForeignKey("TreasuryConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Counterparty");

                    b.Navigation("Entity");

                    b.Navigation("TreasuryConcept");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Treasury.Domain.BankAccounts.BankAccount", b =>
                {
                    b.Navigation("TreasuryMovements");
                });

            modelBuilder.Entity("Treasury.Domain.Issuers.Issuer", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("TreasuryMovementsAsCounterparty");

                    b.Navigation("TreasuryMovementsAsEntity");
                });

            modelBuilder.Entity("Treasury.Domain.TreasuryConcepts.TreasuryConcept", b =>
                {
                    b.Navigation("TreasuryMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
