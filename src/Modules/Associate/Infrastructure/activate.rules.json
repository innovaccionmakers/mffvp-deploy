[
  {
    "WorkflowName": "Associate.Activates.Validation",
    "Rules": [
      {
        "RuleName": "IdTypeRequired",
        "ErrorCode": "1",
        "ErrorMessage": "El Tipo Id es obligatorio",
        "Expression": "!string.IsNullOrWhiteSpace(input.request.IdentificationType)"
      },
      {
        "RuleName": "IdentificationRequired",
        "ErrorCode": "2",
        "ErrorMessage": "La IdentificaciÃ³n es obligatoria",
        "Expression": "!string.IsNullOrWhiteSpace(input.request.Identification)"
      },
      {
        "RuleName": "PensionerRequired",
        "ErrorCode": "3",
        "ErrorMessage": "El campo Pensionado es obligatorio",
        "Expression": "input.request.Pensioner != null"
      },
      {
        "RuleName": "PensionerBoolean",
        "ErrorCode": "4",
        "ErrorMessage": "El campo pensionado solo recibe valor 'true' o 'false'",
        "Expression": "input.request.Pensioner == true || input.request.Pensioner == false"
      },
      {
        "RuleName": "PensionRequirementsWhenFalse",
        "ErrorCode": "5",
        "ErrorMessage": "El campo CumpleRequisitosPension es obligatorio solo cuando el campo Pensionado tenga el valor de false",
        "Expression": "input.request.Pensioner == true || (input.request.Pensioner == false && input.request.MeetsPensionRequirements != null)"
      },
      {
        "RuleName": "PensionRequirementsMissing",
        "ErrorCode": "6",
        "ErrorMessage": "El campo CumpleRequisitosPension es obligatorio solo cuando el campo Pensionado tenga el valor de false",
        "Expression": "input.request.Pensioner == true || input.request.MeetsPensionRequirements != null"
      },
      {
        "RuleName": "MeetsPensionRequirementsBoolean",
        "ErrorCode": "7",
        "ErrorMessage": "El campo CumpleRequisitosPension solo recibe valor 'true' o 'false'",
        "Expression": "input.request.MeetsPensionRequirements == null || input.request.MeetsPensionRequirements == true || input.request.MeetsPensionRequirements == false"
      },
      {
        "RuleName": "StartDateNotRequiredWhenPensionerTrue",
        "ErrorCode": "8",
        "ErrorMessage": "El campo FechaInicioReqPen es obligatorio solo cuando el campo Pensionado tenga el valor de false y el campo CumpleRequisitosPension tenga el valor true",
        "Expression": "input.request.Pensioner == true || input.request.MeetsPensionRequirements != true || input.request.StartDateReqPen != null"
      },
      {
        "RuleName": "EndDateRequiredWhenConditionsMet",
        "ErrorCode": "9",
        "ErrorMessage": "El campo FechaFinReqPen es obligatorio solo cuando el campo Pensionado tenga el valor de false y el campo CumpleRequisitosPension tenga el valor true",
        "Expression": "input.request.Pensioner == true || input.request.MeetsPensionRequirements != true || input.request.EndDateReqPen != null"
      },
      {
        "RuleName": "DateValidation",
        "ErrorCode": "10",
        "ErrorMessage": "La Fecha Final debe ser mayor a la Fecha Inicial",
        "Expression": "input.request.StartDateReqPen == null || input.request.EndDateReqPen == null || input.request.EndDateReqPen > input.request.StartDateReqPen"
      },
      {
        "RuleName": "EndDateAfterCurrentDate",
        "ErrorCode": "11",
        "ErrorMessage": "La Fecha Final debe ser mayor a la Fecha Actual",
        "Expression": "input.request.EndDateReqPen == null || input.request.EndDateReqPen > DateTime.Now"
      },
      {
        "RuleName": "IdTypeHomologated",
        "ErrorCode": "12",
        "ErrorMessage": "El tipo Id no se encuentra homologado",
        "Expression": "input.request.IdentificationType != null && (input.Client != null && input.request.IdentificationType.Contains(input.Client.IdType))"
      },
      {
        "RuleName": "ClientExists",
        "ErrorCode": "13",
        "ErrorMessage": "El Cliente no existe",
        "Expression": "input.Client != null"
      },
      {
        "RuleName": "ClientNotBlocked",
        "ErrorCode": "14",
        "ErrorMessage": "El Cliente se encuentra Bloqueado",
        "Expression": "input.Client != null && !input.Client.IsBlocked"
      },
      {
        "RuleName": "ClientActive",
        "ErrorCode": "15",
        "ErrorMessage": "El Cliente se encuentra Inactivo",
        "Expression": "input.Client != null && input.Client.IsActive"
      },
      {
        "RuleName": "ClientNotActivates",
        "ErrorCode": "16",
        "ErrorMessage": "El cliente ya se encuentra afiliado en el producto",
        "Expression": "input.existingActivate == false"
      }
    ]
  }
]