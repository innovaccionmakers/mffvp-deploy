// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Security.Infrastructure.Database;

#nullable disable

namespace Security.Infrastructure.Database.Migrations
{
    [DbContext(typeof(SecurityDbContext))]
    [Migration("20250706000902_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("seguridad")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Security.Domain.RolePermissions.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<string>("ScopePermission")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permiso");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roles_permisos", "seguridad");
                });

            modelBuilder.Entity("Security.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("objetivo");

                    b.HasKey("Id");

                    b.ToTable("roles", "seguridad");
                });

            modelBuilder.Entity("Security.Domain.UserPermissions.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Granted")
                        .HasColumnType("boolean")
                        .HasColumnName("concedido");

                    b.Property<int>("PermitToken")
                        .HasColumnType("integer")
                        .HasColumnName("permiso");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("usuarios_permisos", "seguridad");
                });

            modelBuilder.Entity("Security.Domain.UserRoles.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RolePermissionsId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_permiso_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("RolePermissionsId");

                    b.HasIndex("UserId");

                    b.ToTable("usuarios_roles", "seguridad");
                });

            modelBuilder.Entity("Security.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_mostrar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correo");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificacion");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("segundo_nombre");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_usuario");

                    b.HasKey("Id");

                    b.ToTable("usuarios", "seguridad");
                });

            modelBuilder.Entity("Security.Domain.RolePermissions.RolePermission", b =>
                {
                    b.HasOne("Security.Domain.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Security.Domain.UserPermissions.UserPermission", b =>
                {
                    b.HasOne("Security.Domain.Users.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Security.Domain.UserRoles.UserRole", b =>
                {
                    b.HasOne("Security.Domain.RolePermissions.RolePermission", "RolePermission")
                        .WithMany("UserRoles")
                        .HasForeignKey("RolePermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RolePermission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Security.Domain.RolePermissions.RolePermission", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Security.Domain.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Security.Domain.Users.User", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
