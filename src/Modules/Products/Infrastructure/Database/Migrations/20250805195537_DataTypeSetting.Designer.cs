// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Products.Infrastructure.Database;

#nullable disable

namespace Products.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    [Migration("20250805195537_DataTypeSetting")]
    partial class DataTypeSetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("productos")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Property<int>("ConfigurationParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigurationParameterId"));

                    b.Property<bool>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("editable");

                    b.Property<string>("HomologationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo_homologacion");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("padre_id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("estado");

                    b.Property<bool>("System")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sistema");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("categoria")
                        .HasColumnName("tipo");

                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("ConfigurationParameterId");

                    b.HasIndex("ParentId");

                    b.ToTable("parametros_configuracion", "productos");
                });

            modelBuilder.Entity("Products.Domain.AccumulatedCommissions.AccumulatedCommission", b =>
                {
                    b.Property<int>("AccumulatedCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccumulatedCommissionId"));

                    b.Property<decimal>("AccumulatedValue")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("valor_acumulado");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<int>("CommissionId")
                        .HasColumnType("integer")
                        .HasColumnName("comisiones_id");

                    b.Property<decimal>("PaidValue")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("valor_pagado");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_pago");

                    b.Property<decimal>("PendingValue")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("valor_pendiente");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.HasKey("AccumulatedCommissionId");

                    b.HasIndex("CommissionId");

                    b.ToTable("comisiones_acumuladas", "productos");
                });

            modelBuilder.Entity("Products.Domain.AlternativePortfolios.AlternativePortfolio", b =>
                {
                    b.Property<int>("AlternativePortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AlternativePortfolioId"));

                    b.Property<int>("AlternativeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCollector")
                        .HasColumnType("boolean")
                        .HasColumnName("recaudador");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("AlternativePortfolioId");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("alternativas_portafolios", "productos");
                });

            modelBuilder.Entity("Products.Domain.Alternatives.Alternative", b =>
                {
                    b.Property<int>("AlternativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AlternativeId"));

                    b.Property<int>("AlternativeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_alternativa_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("PlanFundId")
                        .HasColumnType("integer")
                        .HasColumnName("planes_fondo_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("AlternativeId");

                    b.HasIndex("PlanFundId");

                    b.ToTable("alternativas", "productos");
                });

            modelBuilder.Entity("Products.Domain.Commercials.Commercial", b =>
                {
                    b.Property<int>("CommercialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommercialId"));

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prefijo");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("CommercialId");

                    b.ToTable("comerciales", "productos");
                });

            modelBuilder.Entity("Products.Domain.Commissions.Commission", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommissionId"));

                    b.Property<string>("CalculationBase")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("base_calculo");

                    b.Property<string>("CalculationRule")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("regla_calculo");

                    b.Property<string>("CommissionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_comision");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("concepto");

                    b.Property<string>("Modality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modalidad");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("periodo");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("CommissionId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("comisiones", "productos");
                });

            modelBuilder.Entity("Products.Domain.Objectives.Objective", b =>
                {
                    b.Property<int>("ObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ObjectiveId"));

                    b.Property<int>("AffiliateId")
                        .HasColumnType("integer")
                        .HasColumnName("afiliado_id");

                    b.Property<int>("AlternativeId")
                        .HasColumnType("integer")
                        .HasColumnName("alternativa_id");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("saldo");

                    b.Property<int>("CommercialId")
                        .HasColumnType("integer")
                        .HasColumnName("comercial_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("CurrentOfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("oficina_actual_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("ObjectiveTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_objetivo_id");

                    b.Property<int>("OpeningOfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("oficina_apertura_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("ObjectiveId");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("CommercialId");

                    b.ToTable("objetivos", "productos");
                });

            modelBuilder.Entity("Products.Domain.Offices.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfficeId"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("ciudad_id");

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prefijo");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("OfficeId");

                    b.ToTable("oficinas", "productos");
                });

            modelBuilder.Entity("Products.Domain.PensionFunds.PensionFund", b =>
                {
                    b.Property<int>("PensionFundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PensionFundId"));

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_documento");

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologado");

                    b.Property<int>("IdentificationNumber")
                        .HasColumnType("integer")
                        .HasColumnName("identificacion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_corto");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("PensionFundId");

                    b.ToTable("fondos_voluntarios_pensiones", "productos");
                });

            modelBuilder.Entity("Products.Domain.PlanFunds.PlanFund", b =>
                {
                    b.Property<int>("PlanFundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanFundId"));

                    b.Property<int>("PensionFundId")
                        .HasColumnType("integer")
                        .HasColumnName("fondo_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.HasKey("PlanFundId");

                    b.HasIndex("PensionFundId");

                    b.HasIndex("PlanId");

                    b.ToTable("planes_fondo", "productos");
                });

            modelBuilder.Entity("Products.Domain.Plans.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologado");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("PlanId");

                    b.ToTable("planes", "productos");
                });

            modelBuilder.Entity("Products.Domain.PortfolioValuations.PortfolioValuation", b =>
                {
                    b.Property<int>("PortfolioValuationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortfolioValuationId"));

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cierre");

                    b.Property<decimal>("DailyYield")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("rentabilidad_diaria");

                    b.Property<decimal>("GrossYieldUnits")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("rendimiento_bruto_unidad");

                    b.Property<decimal>("IncomingOperations")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("operaciones_entrada");

                    b.Property<decimal>("OutgoingOperations")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("operaciones_salida");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_proceso");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("costo_unidad");

                    b.Property<decimal>("UnitValue")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("valor_unidad");

                    b.Property<decimal>("Units")
                        .HasPrecision(38, 16)
                        .HasColumnType("numeric(38,16)")
                        .HasColumnName("unidades");

                    b.Property<decimal>("Value")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("valor");

                    b.HasKey("PortfolioValuationId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("valoracion_portafolio_dia", "productos");
                });

            modelBuilder.Entity("Products.Domain.Portfolios.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortfolioId"));

                    b.Property<decimal>("AdditionalMinimumAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("aporte_minimo_adicional");

                    b.Property<Guid>("AdviceClassification")
                        .HasColumnType("uuid")
                        .HasColumnName("clasificacion_asesoria");

                    b.Property<int>("AgileWithdrawalPercentageProtectedBalance")
                        .HasColumnType("integer")
                        .HasColumnName("porc_retiro_agil_saldo_protegido");

                    b.Property<string>("AllowsAgileWithdrawal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permite_retiro_agil");

                    b.Property<decimal>("CommissionPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("porcentaje_comision");

                    b.Property<Guid>("CommissionRateTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("tipo_tasa_comision");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_actual");

                    b.Property<Guid>("Custodian")
                        .HasColumnType("uuid")
                        .HasColumnName("custodio");

                    b.Property<string>("HomologatedCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("codigo_homologacion");

                    b.Property<Guid>("IndustryClassification")
                        .HasColumnType("uuid")
                        .HasColumnName("clasificacion_industria");

                    b.Property<decimal>("InitialMinimumAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("aporte_minimo_inicial");

                    b.Property<DateTime>("LastRatingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ultima_calificacion");

                    b.Property<int>("MaxParticipationPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("porc_max_participacion");

                    b.Property<decimal>("MinimumVirPercentage")
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("vir_retiro_minimo");

                    b.Property<int>("ModalityId")
                        .HasColumnType("integer")
                        .HasColumnName("modalidad_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NitApprovedPortfolio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nit_portafolio_homologado");

                    b.Property<DateTime>("OperationsStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio_operaciones");

                    b.Property<decimal>("PartialVirPercentage")
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("vir_retiro_max_parcial");

                    b.Property<int>("PenaltyPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("porcentaje_penalizacion");

                    b.Property<int>("PermanencePeriod")
                        .HasColumnType("integer")
                        .HasColumnName("plazo_permanencia");

                    b.Property<DateTime>("PortfolioExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_vto_portafolio");

                    b.Property<string>("PortfolioNIT")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nit_portafolio");

                    b.Property<Guid>("Qualifier")
                        .HasColumnType("uuid")
                        .HasColumnName("calificadora");

                    b.Property<Guid>("Rating")
                        .HasColumnType("uuid")
                        .HasColumnName("calificacion");

                    b.Property<Guid>("RatingType")
                        .HasColumnType("uuid")
                        .HasColumnName("tipo_calificacion");

                    b.Property<Guid>("RiskProfile")
                        .HasColumnType("uuid")
                        .HasColumnName("perfil_riesgo");

                    b.Property<int>("SFCBusinessCode")
                        .HasColumnType("integer")
                        .HasColumnName("cod_Negocio_SFC");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_corto");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<int>("VerificationDigit")
                        .HasColumnType("integer")
                        .HasColumnName("digito_verificacion");

                    b.Property<int>("WithdrawalPercentageProtectedBalance")
                        .HasColumnType("integer")
                        .HasColumnName("porc_retiro_saldo_protegido");

                    b.HasKey("PortfolioId");

                    b.ToTable("portafolios", "productos");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.HasOne("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Products.Domain.AccumulatedCommissions.AccumulatedCommission", b =>
                {
                    b.HasOne("Products.Domain.Commissions.Commission", "Commission")
                        .WithMany("AccumulatedCommissions")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");
                });

            modelBuilder.Entity("Products.Domain.AlternativePortfolios.AlternativePortfolio", b =>
                {
                    b.HasOne("Products.Domain.Alternatives.Alternative", "Alternative")
                        .WithMany("Portfolios")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.Portfolios.Portfolio", "Portfolio")
                        .WithMany("Alternatives")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternative");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Products.Domain.Alternatives.Alternative", b =>
                {
                    b.HasOne("Products.Domain.PlanFunds.PlanFund", "PlanFund")
                        .WithMany("Alternatives")
                        .HasForeignKey("PlanFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanFund");
                });

            modelBuilder.Entity("Products.Domain.Commissions.Commission", b =>
                {
                    b.HasOne("Products.Domain.Portfolios.Portfolio", "Portfolio")
                        .WithMany("Commissions")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Products.Domain.Objectives.Objective", b =>
                {
                    b.HasOne("Products.Domain.Alternatives.Alternative", "Alternative")
                        .WithMany("Objectives")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.Commercials.Commercial", "Commercial")
                        .WithMany()
                        .HasForeignKey("CommercialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alternative");

                    b.Navigation("Commercial");
                });

            modelBuilder.Entity("Products.Domain.PlanFunds.PlanFund", b =>
                {
                    b.HasOne("Products.Domain.PensionFunds.PensionFund", "PensionFund")
                        .WithMany("PlanFunds")
                        .HasForeignKey("PensionFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.Plans.Plan", "Plan")
                        .WithMany("PlanFunds")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PensionFund");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Products.Domain.PortfolioValuations.PortfolioValuation", b =>
                {
                    b.HasOne("Products.Domain.Portfolios.Portfolio", "Portfolio")
                        .WithMany("PortfolioValuations")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Common.SharedKernel.Domain.ConfigurationParameters.ConfigurationParameter", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Products.Domain.Alternatives.Alternative", b =>
                {
                    b.Navigation("Objectives");

                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("Products.Domain.Commissions.Commission", b =>
                {
                    b.Navigation("AccumulatedCommissions");
                });

            modelBuilder.Entity("Products.Domain.PensionFunds.PensionFund", b =>
                {
                    b.Navigation("PlanFunds");
                });

            modelBuilder.Entity("Products.Domain.PlanFunds.PlanFund", b =>
                {
                    b.Navigation("Alternatives");
                });

            modelBuilder.Entity("Products.Domain.Plans.Plan", b =>
                {
                    b.Navigation("PlanFunds");
                });

            modelBuilder.Entity("Products.Domain.Portfolios.Portfolio", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("Commissions");

                    b.Navigation("PortfolioValuations");
                });
#pragma warning restore 612, 618
        }
    }
}
